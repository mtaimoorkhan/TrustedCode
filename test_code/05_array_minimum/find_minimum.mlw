module FindMinimum

  use int.Int
  use array.Array
  use ref.Ref

  (* Theory: Define what it means for an element to be minimum *)
  predicate is_minimum (a: array int) (min_val: int) (min_idx: int) =
    0 <= min_idx < length a /\
    a[min_idx] = min_val /\
    forall i: int. 0 <= i < length a -> a[i] >= min_val

  (* Predicate to check if a value exists in array *)
  predicate mem (a: array int) (v: int) =
    exists i: int. 0 <= i < length a /\ a[i] = v

  (* Function to find minimum element *)
  let find_minimum (arr: array int) : int
    requires { length arr > 0 }
    ensures  { mem arr result }
    ensures  { forall i: int. 0 <= i < length arr -> arr[i] >= result }
  =
    let minimum = ref arr[0] in
    for i = 1 to length arr - 1 do
      invariant { mem arr !minimum }
      invariant { forall j: int. 0 <= j < i -> arr[j] >= !minimum }
      if arr[i] < !minimum then
        minimum := arr[i]
    done;
    !minimum
    
end
