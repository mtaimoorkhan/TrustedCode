module Factorial
  use int.Int
  
  (* Define factorial as a logical function *)
  function fact (n: int) : int
  
  (* Axioms defining factorial *)
  axiom fact_zero: fact 0 = 1
  axiom fact_succ: forall n: int. n >= 0 -> fact (n + 1) = (n + 1) * fact n
  
  (* Iterative factorial function *)
  let factorial (n: int) : int
    requires { n >= 0 }
    ensures  { result = fact n }
  =
    let ref result = 1 in
    let ref i = 1 in
    while i <= n do
      invariant { 1 <= i <= n + 1 }
      invariant { result = fact (i - 1) }
      variant   { n - i + 1 }
      result <- result * i;
      i <- i + 1
    done;
    result

end
