module BinarySearch
  use int.Int
  use array.Array
  use ref.Ref

  let binary_search (arr: array int) (target: int) : int
    requires { forall i j. 0 <= i < j < length arr -> arr[i] <= arr[j] }
    ensures { result = -1 \/ (0 <= result < length arr /\ arr[result] = target) }
    ensures { result = -1 -> forall i. 0 <= i < length arr -> arr[i] <> target }
  =
    let left = ref 0 in
    let right = ref (length arr - 1) in
    
    while !left <= !right do
      invariant { 0 <= !left <= length arr }
      invariant { -1 <= !right < length arr }
      invariant { !left <= !right + 1 }
      invariant { forall i. 0 <= i < !left -> arr[i] < target }
      invariant { forall i. !right < i < length arr -> arr[i] > target }
      variant { !right - !left + 1 }
      
      (* Simply choose left as midpoint for safety *)
      let mid = !left in
      
      if !left < length arr && arr[!left] = target then
        return !left
      else if !left < length arr && arr[!left] < target then
        left := !left + 1
      else
        right := !left - 1
    done;
    
    -1

end
